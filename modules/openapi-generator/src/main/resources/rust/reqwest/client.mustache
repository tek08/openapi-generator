use std::rc::Rc;

use super::configuration::Configuration;

pub struct APIClient {
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
    {{#-last}}
<<<<<<< HEAD
    {{{classFilename}}}: Box<dyn crate::apis::{{{classFilename}}}::{{{classname}}}>,
=======
    {{{classFilename}}}: Box<dyn crate::apis::{{{classname}}}>,
>>>>>>> ooof
    {{/-last}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
}

impl APIClient {
    pub fn new(configuration: Configuration) -> APIClient {
        let rc = Rc::new(configuration);

        APIClient {
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
            {{#-last}}
<<<<<<< HEAD
            {{{classFilename}}}: Box::new(crate::apis::{{{classFilename}}}::{{{classname}}}Client::new(rc.clone())),
=======
            {{{classFilename}}}: Box::new(crate::apis::{{{classname}}}Client::new(rc.clone())),
>>>>>>> ooof
            {{/-last}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
        }
    }

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-last}}
<<<<<<< HEAD
    pub fn {{{classFilename}}}(&self) -> &dyn crate::apis::{{{classFilename}}}::{{{classname}}}{
=======
    pub fn {{{classFilename}}}(&self) -> &dyn crate::apis::{{{classname}}}{
>>>>>>> ooof
        self.{{{classFilename}}}.as_ref()
    }

{{/-last}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
}

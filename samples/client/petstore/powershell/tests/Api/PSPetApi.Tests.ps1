#
# OpenAPI Petstore
# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<<<<<<< HEAD
Describe -tag 'PSPetstore' -name 'PSPSPetApi' {
    Context 'Add-PSPet' {
        It 'Test Add-PSPet' {
            #$TestResult = Invoke-PetApiGetPetById -Pet "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
Describe -tag 'PSPetstore' -name 'PSPetApi' {
    Context 'Add-PSPet' {
        It 'Test Add-PSPet' {
            #$TestResult = Invoke-PetApiGetPetById -Pet "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Remove-Pet' {
        It 'Test Remove-Pet' {
            #$TestResult = Invoke-PetApiGetPetById -PetId "TEST_VALUE" -ApiKey "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Find-PSPetsByStatus' {
        It 'Test Find-PSPetsByStatus' {
            #$TestResult = Invoke-PetApiGetPetById -Status "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Find-PSPetsByTags' {
        It 'Test Find-PSPetsByTags' {
            #$TestResult = Invoke-PetApiGetPetById -Tags "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Get-PSPetById' {
        It 'Test Get-PSPetById' {
            #$TestResult = Invoke-PetApiGetPetById -PetId "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Update-PSPet' {
        It 'Test Update-PSPet' {
            #$TestResult = Invoke-PetApiGetPetById -Pet "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Update-PSPetWithForm' {
        It 'Test Update-PSPetWithForm' {
            #$TestResult = Invoke-PetApiGetPetById -PetId "TEST_VALUE" -Name "TEST_VALUE" -Status "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Invoke-PSUploadFile' {
        It 'Test Invoke-PSUploadFile' {
            #$TestResult = Invoke-PetApiGetPetById -PetId "TEST_VALUE" -AdditionalMetadata "TEST_VALUE" -File "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

}

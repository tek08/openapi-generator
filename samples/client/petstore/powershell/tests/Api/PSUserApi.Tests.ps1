#
# OpenAPI Petstore
# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<<<<<<< HEAD
Describe -tag 'PSPetstore' -name 'PSPSUserApi' {
    Context 'New-PSUser' {
        It 'Test New-PSUser' {
            #$TestResult = Invoke-PetApiGetPetById -User "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
Describe -tag 'PSPetstore' -name 'PSUserApi' {
    Context 'New-PSUser' {
        It 'Test New-PSUser' {
            #$TestResult = Invoke-PetApiGetPetById -User "TEST_VALUE"
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'New-PSUsersWithArrayInput' {
        It 'Test New-PSUsersWithArrayInput' {
            #$TestResult = Invoke-PetApiGetPetById -User "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'New-PSUsersWithListInput' {
        It 'Test New-PSUsersWithListInput' {
            #$TestResult = Invoke-PetApiGetPetById -User "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Remove-PSUser' {
        It 'Test Remove-PSUser' {
            #$TestResult = Invoke-PetApiGetPetById -Username "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Get-PSUserByName' {
        It 'Test Get-PSUserByName' {
            #$TestResult = Invoke-PetApiGetPetById -Username "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Invoke-PSLoginUser' {
        It 'Test Invoke-PSLoginUser' {
            #$TestResult = Invoke-PetApiGetPetById -Username "TEST_VALUE" -Password "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Invoke-PSLogoutUser' {
        It 'Test Invoke-PSLogoutUser' {
            #$TestResult = Invoke-PetApiGetPetById
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

    Context 'Update-PSUser' {
        It 'Test Update-PSUser' {
            #$TestResult = Invoke-PetApiGetPetById -Username "TEST_VALUE" -User "TEST_VALUE"
<<<<<<< HEAD
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
=======
            #$TestResult | Should BeOfType TODO
            #$TestResult.property | Should Be 0
>>>>>>> ooof
        }
    }

}

{
  "openapi" : "3.0.1",
  "info" : {
<<<<<<< HEAD
=======
    "title" : "OpenAPI Petstore",
>>>>>>> ooof
    "description" : "This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.",
    "license" : {
      "name" : "Apache-2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
<<<<<<< HEAD
    "title" : "OpenAPI Petstore",
=======
>>>>>>> ooof
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "http://petstore.swagger.io/v2"
  } ],
  "tags" : [ {
<<<<<<< HEAD
    "description" : "Everything about your Pets",
    "name" : "pet"
  }, {
    "description" : "Access to Petstore orders",
    "name" : "store"
  }, {
    "description" : "Operations about user",
    "name" : "user"
  } ],
  "paths" : {
    "/pet" : {
      "post" : {
        "operationId" : "addPet",
        "requestBody" : {
=======
    "name" : "pet",
    "description" : "Everything about your Pets"
  }, {
    "name" : "store",
    "description" : "Access to Petstore orders"
  }, {
    "name" : "user",
    "description" : "Operations about user"
  } ],
  "paths" : {
    "/pet" : {
      "put" : {
        "tags" : [ "pet" ],
        "summary" : "Update an existing pet",
        "operationId" : "updatePet",
        "requestBody" : {
          "description" : "Pet object that needs to be added to the store",
>>>>>>> ooof
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            }
          },
<<<<<<< HEAD
          "description" : "Pet object that needs to be added to the store",
          "required" : true
        },
        "responses" : {
          "405" : {
            "content" : { },
            "description" : "Invalid input"
=======
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Pet not found",
            "content" : { }
          },
          "405" : {
            "description" : "Validation exception",
            "content" : { }
>>>>>>> ooof
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ],
<<<<<<< HEAD
        "summary" : "Add a new pet to the store",
        "tags" : [ "pet" ],
=======
>>>>>>> ooof
        "x-codegen-request-body-name" : "body",
        "x-contentType" : "application/json",
        "x-accepts" : "application/json"
      },
<<<<<<< HEAD
      "put" : {
        "operationId" : "updatePet",
        "requestBody" : {
=======
      "post" : {
        "tags" : [ "pet" ],
        "summary" : "Add a new pet to the store",
        "operationId" : "addPet",
        "requestBody" : {
          "description" : "Pet object that needs to be added to the store",
>>>>>>> ooof
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            }
          },
<<<<<<< HEAD
          "description" : "Pet object that needs to be added to the store",
          "required" : true
        },
        "responses" : {
          "400" : {
            "content" : { },
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "content" : { },
            "description" : "Pet not found"
          },
          "405" : {
            "content" : { },
            "description" : "Validation exception"
=======
          "required" : true
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input",
            "content" : { }
>>>>>>> ooof
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ],
<<<<<<< HEAD
        "summary" : "Update an existing pet",
        "tags" : [ "pet" ],
=======
>>>>>>> ooof
        "x-codegen-request-body-name" : "body",
        "x-contentType" : "application/json",
        "x-accepts" : "application/json"
      }
    },
    "/pet/findByStatus" : {
      "get" : {
<<<<<<< HEAD
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findPetsByStatus",
        "parameters" : [ {
          "description" : "Status values that need to be considered for filter",
          "explode" : false,
          "in" : "query",
          "name" : "status",
          "required" : true,
          "schema" : {
            "items" : {
              "default" : "available",
              "enum" : [ "available", "pending", "sold" ],
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/xml" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "type" : "array"
=======
        "tags" : [ "pet" ],
        "summary" : "Finds Pets by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findPetsByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "default" : "available",
              "enum" : [ "available", "pending", "sold" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
>>>>>>> ooof
                }
              },
              "application/json" : {
                "schema" : {
<<<<<<< HEAD
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "successful operation"
          },
          "400" : {
            "content" : { },
            "description" : "Invalid status value"
=======
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value",
            "content" : { }
>>>>>>> ooof
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ],
<<<<<<< HEAD
        "summary" : "Finds Pets by status",
        "tags" : [ "pet" ],
=======
>>>>>>> ooof
        "x-accepts" : "application/json"
      }
    },
    "/pet/findByTags" : {
      "get" : {
<<<<<<< HEAD
        "deprecated" : true,
        "description" : "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId" : "findPetsByTags",
        "parameters" : [ {
          "description" : "Tags to filter by",
          "explode" : false,
          "in" : "query",
          "name" : "tags",
          "required" : true,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/xml" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "type" : "array"
=======
        "tags" : [ "pet" ],
        "summary" : "Finds Pets by tags",
        "description" : "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId" : "findPetsByTags",
        "parameters" : [ {
          "name" : "tags",
          "in" : "query",
          "description" : "Tags to filter by",
          "required" : true,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
>>>>>>> ooof
                }
              },
              "application/json" : {
                "schema" : {
<<<<<<< HEAD
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "successful operation"
          },
          "400" : {
            "content" : { },
            "description" : "Invalid tag value"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ],
        "summary" : "Finds Pets by tags",
        "tags" : [ "pet" ],
=======
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid tag value",
            "content" : { }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ],
>>>>>>> ooof
        "x-accepts" : "application/json"
      }
    },
    "/pet/{petId}" : {
<<<<<<< HEAD
      "delete" : {
        "operationId" : "deletePet",
        "parameters" : [ {
          "in" : "header",
          "name" : "api_key",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Pet id to delete",
          "in" : "path",
          "name" : "petId",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "400" : {
            "content" : { },
            "description" : "Invalid pet value"
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ],
        "summary" : "Deletes a pet",
        "tags" : [ "pet" ],
        "x-accepts" : "application/json"
      },
      "get" : {
        "description" : "Returns a single pet",
        "operationId" : "getPetById",
        "parameters" : [ {
          "description" : "ID of pet to return",
          "in" : "path",
          "name" : "petId",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
=======
      "get" : {
        "tags" : [ "pet" ],
        "summary" : "Find pet by ID",
        "description" : "Returns a single pet",
        "operationId" : "getPetById",
        "parameters" : [ {
          "name" : "petId",
          "in" : "path",
          "description" : "ID of pet to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
>>>>>>> ooof
          }
        } ],
        "responses" : {
          "200" : {
<<<<<<< HEAD
=======
            "description" : "successful operation",
>>>>>>> ooof
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              }
<<<<<<< HEAD
            },
            "description" : "successful operation"
          },
          "400" : {
            "content" : { },
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "content" : { },
            "description" : "Pet not found"
=======
            }
          },
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Pet not found",
            "content" : { }
>>>>>>> ooof
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
<<<<<<< HEAD
        "summary" : "Find pet by ID",
        "tags" : [ "pet" ],
        "x-accepts" : "application/json"
      },
      "post" : {
        "operationId" : "updatePetWithForm",
        "parameters" : [ {
          "description" : "ID of pet that needs to be updated",
          "in" : "path",
          "name" : "petId",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
=======
        "x-accepts" : "application/json"
      },
      "post" : {
        "tags" : [ "pet" ],
        "summary" : "Updates a pet in the store with form data",
        "operationId" : "updatePetWithForm",
        "parameters" : [ {
          "name" : "petId",
          "in" : "path",
          "description" : "ID of pet that needs to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
>>>>>>> ooof
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "properties" : {
                  "name" : {
<<<<<<< HEAD
                    "description" : "Updated name of the pet",
                    "type" : "string"
                  },
                  "status" : {
                    "description" : "Updated status of the pet",
                    "type" : "string"
=======
                    "type" : "string",
                    "description" : "Updated name of the pet"
                  },
                  "status" : {
                    "type" : "string",
                    "description" : "Updated status of the pet"
>>>>>>> ooof
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "405" : {
<<<<<<< HEAD
            "content" : { },
            "description" : "Invalid input"
=======
            "description" : "Invalid input",
            "content" : { }
>>>>>>> ooof
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ],
<<<<<<< HEAD
        "summary" : "Updates a pet in the store with form data",
        "tags" : [ "pet" ],
        "x-contentType" : "application/x-www-form-urlencoded",
        "x-accepts" : "application/json"
=======
        "x-contentType" : "application/x-www-form-urlencoded",
        "x-accepts" : "application/json"
      },
      "delete" : {
        "tags" : [ "pet" ],
        "summary" : "Deletes a pet",
        "operationId" : "deletePet",
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "petId",
          "in" : "path",
          "description" : "Pet id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid pet value",
            "content" : { }
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ],
        "x-accepts" : "application/json"
>>>>>>> ooof
      }
    },
    "/pet/{petId}/uploadImage" : {
      "post" : {
<<<<<<< HEAD
        "operationId" : "uploadFile",
        "parameters" : [ {
          "description" : "ID of pet to update",
          "in" : "path",
          "name" : "petId",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
=======
        "tags" : [ "pet" ],
        "summary" : "uploads an image",
        "operationId" : "uploadFile",
        "parameters" : [ {
          "name" : "petId",
          "in" : "path",
          "description" : "ID of pet to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
>>>>>>> ooof
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "properties" : {
                  "additionalMetadata" : {
<<<<<<< HEAD
                    "description" : "Additional data to pass to server",
                    "type" : "string"
                  },
                  "file" : {
                    "description" : "file to upload",
                    "format" : "binary",
                    "type" : "string"
=======
                    "type" : "string",
                    "description" : "Additional data to pass to server"
                  },
                  "file" : {
                    "type" : "string",
                    "description" : "file to upload",
                    "format" : "binary"
>>>>>>> ooof
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
<<<<<<< HEAD
=======
            "description" : "successful operation",
>>>>>>> ooof
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
<<<<<<< HEAD
            },
            "description" : "successful operation"
=======
            }
>>>>>>> ooof
          }
        },
        "security" : [ {
          "petstore_auth" : [ "write:pets", "read:pets" ]
        } ],
<<<<<<< HEAD
        "summary" : "uploads an image",
        "tags" : [ "pet" ],
=======
>>>>>>> ooof
        "x-contentType" : "multipart/form-data",
        "x-accepts" : "application/json"
      }
    },
    "/store/inventory" : {
      "get" : {
<<<<<<< HEAD
=======
        "tags" : [ "store" ],
        "summary" : "Returns pet inventories by status",
>>>>>>> ooof
        "description" : "Returns a map of status codes to quantities",
        "operationId" : "getInventory",
        "responses" : {
          "200" : {
<<<<<<< HEAD
            "content" : {
              "application/json" : {
                "schema" : {
                  "additionalProperties" : {
                    "format" : "int32",
                    "type" : "integer"
                  },
                  "type" : "object"
                }
              }
            },
            "description" : "successful operation"
=======
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
>>>>>>> ooof
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
<<<<<<< HEAD
        "summary" : "Returns pet inventories by status",
        "tags" : [ "store" ],
=======
>>>>>>> ooof
        "x-accepts" : "application/json"
      }
    },
    "/store/order" : {
      "post" : {
<<<<<<< HEAD
        "operationId" : "placeOrder",
        "requestBody" : {
=======
        "tags" : [ "store" ],
        "summary" : "Place an order for a pet",
        "operationId" : "placeOrder",
        "requestBody" : {
          "description" : "order placed for purchasing the pet",
>>>>>>> ooof
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
<<<<<<< HEAD
          "description" : "order placed for purchasing the pet",
=======
>>>>>>> ooof
          "required" : true
        },
        "responses" : {
          "200" : {
<<<<<<< HEAD
=======
            "description" : "successful operation",
>>>>>>> ooof
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
<<<<<<< HEAD
            },
            "description" : "successful operation"
          },
          "400" : {
            "content" : { },
            "description" : "Invalid Order"
          }
        },
        "summary" : "Place an order for a pet",
        "tags" : [ "store" ],
=======
            }
          },
          "400" : {
            "description" : "Invalid Order",
            "content" : { }
          }
        },
>>>>>>> ooof
        "x-codegen-request-body-name" : "body",
        "x-contentType" : "*/*",
        "x-accepts" : "application/json"
      }
    },
    "/store/order/{orderId}" : {
<<<<<<< HEAD
      "delete" : {
        "description" : "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId" : "deleteOrder",
        "parameters" : [ {
          "description" : "ID of the order that needs to be deleted",
          "in" : "path",
          "name" : "orderId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "content" : { },
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "content" : { },
            "description" : "Order not found"
          }
        },
        "summary" : "Delete purchase order by ID",
        "tags" : [ "store" ],
        "x-accepts" : "application/json"
      },
      "get" : {
        "description" : "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId" : "getOrderById",
        "parameters" : [ {
          "description" : "ID of pet that needs to be fetched",
          "in" : "path",
          "name" : "orderId",
          "required" : true,
          "schema" : {
            "format" : "int64",
            "maximum" : 5,
            "minimum" : 1,
            "type" : "integer"
=======
      "get" : {
        "tags" : [ "store" ],
        "summary" : "Find purchase order by ID",
        "description" : "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId" : "getOrderById",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "ID of pet that needs to be fetched",
          "required" : true,
          "schema" : {
            "maximum" : 5,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
>>>>>>> ooof
          }
        } ],
        "responses" : {
          "200" : {
<<<<<<< HEAD
=======
            "description" : "successful operation",
>>>>>>> ooof
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
<<<<<<< HEAD
            },
            "description" : "successful operation"
          },
          "400" : {
            "content" : { },
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "content" : { },
            "description" : "Order not found"
          }
        },
        "summary" : "Find purchase order by ID",
        "tags" : [ "store" ],
=======
            }
          },
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Order not found",
            "content" : { }
          }
        },
        "x-accepts" : "application/json"
      },
      "delete" : {
        "tags" : [ "store" ],
        "summary" : "Delete purchase order by ID",
        "description" : "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId" : "deleteOrder",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "ID of the order that needs to be deleted",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Order not found",
            "content" : { }
          }
        },
>>>>>>> ooof
        "x-accepts" : "application/json"
      }
    },
    "/user" : {
      "post" : {
<<<<<<< HEAD
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "requestBody" : {
=======
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "Created user object",
>>>>>>> ooof
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
<<<<<<< HEAD
          "description" : "Created user object",
=======
>>>>>>> ooof
          "required" : true
        },
        "responses" : {
          "default" : {
<<<<<<< HEAD
            "content" : { },
            "description" : "successful operation"
          }
        },
        "summary" : "Create user",
        "tags" : [ "user" ],
=======
            "description" : "successful operation",
            "content" : { }
          }
        },
>>>>>>> ooof
        "x-codegen-request-body-name" : "body",
        "x-contentType" : "*/*",
        "x-accepts" : "application/json"
      }
    },
    "/user/createWithArray" : {
      "post" : {
<<<<<<< HEAD
        "operationId" : "createUsersWithArrayInput",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/User"
                },
                "type" : "array"
              }
            }
          },
          "description" : "List of user object",
=======
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "createUsersWithArrayInput",
        "requestBody" : {
          "description" : "List of user object",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
>>>>>>> ooof
          "required" : true
        },
        "responses" : {
          "default" : {
<<<<<<< HEAD
            "content" : { },
            "description" : "successful operation"
          }
        },
        "summary" : "Creates list of users with given input array",
        "tags" : [ "user" ],
=======
            "description" : "successful operation",
            "content" : { }
          }
        },
>>>>>>> ooof
        "x-codegen-request-body-name" : "body",
        "x-contentType" : "*/*",
        "x-accepts" : "application/json"
      }
    },
    "/user/createWithList" : {
      "post" : {
<<<<<<< HEAD
        "operationId" : "createUsersWithListInput",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/User"
                },
                "type" : "array"
              }
            }
          },
          "description" : "List of user object",
=======
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "createUsersWithListInput",
        "requestBody" : {
          "description" : "List of user object",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
>>>>>>> ooof
          "required" : true
        },
        "responses" : {
          "default" : {
<<<<<<< HEAD
            "content" : { },
            "description" : "successful operation"
          }
        },
        "summary" : "Creates list of users with given input array",
        "tags" : [ "user" ],
=======
            "description" : "successful operation",
            "content" : { }
          }
        },
>>>>>>> ooof
        "x-codegen-request-body-name" : "body",
        "x-contentType" : "*/*",
        "x-accepts" : "application/json"
      }
    },
    "/user/login" : {
      "get" : {
<<<<<<< HEAD
        "operationId" : "loginUser",
        "parameters" : [ {
          "description" : "The user name for login",
          "in" : "query",
          "name" : "username",
=======
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
>>>>>>> ooof
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
<<<<<<< HEAD
          "description" : "The password for login in clear text",
          "in" : "query",
          "name" : "password",
=======
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
>>>>>>> ooof
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
<<<<<<< HEAD
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "format" : "int32",
                  "type" : "integer"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when toekn expires",
                "schema" : {
                  "format" : "date-time",
=======
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when toekn expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/json" : {
                "schema" : {
>>>>>>> ooof
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
<<<<<<< HEAD
            "content" : { },
            "description" : "Invalid username/password supplied"
          }
        },
        "summary" : "Logs user into the system",
        "tags" : [ "user" ],
=======
            "description" : "Invalid username/password supplied",
            "content" : { }
          }
        },
>>>>>>> ooof
        "x-accepts" : "application/json"
      }
    },
    "/user/logout" : {
      "get" : {
<<<<<<< HEAD
        "operationId" : "logoutUser",
        "responses" : {
          "default" : {
            "content" : { },
            "description" : "successful operation"
          }
        },
        "summary" : "Logs out current logged in user session",
        "tags" : [ "user" ],
=======
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "responses" : {
          "default" : {
            "description" : "successful operation",
            "content" : { }
          }
        },
>>>>>>> ooof
        "x-accepts" : "application/json"
      }
    },
    "/user/{username}" : {
<<<<<<< HEAD
      "delete" : {
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "description" : "The name that needs to be deleted",
          "in" : "path",
          "name" : "username",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "content" : { },
            "description" : "Invalid username supplied"
          },
          "404" : {
            "content" : { },
            "description" : "User not found"
          }
        },
        "summary" : "Delete user",
        "tags" : [ "user" ],
        "x-accepts" : "application/json"
      },
      "get" : {
        "operationId" : "getUserByName",
        "parameters" : [ {
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "in" : "path",
          "name" : "username",
=======
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
>>>>>>> ooof
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
<<<<<<< HEAD
=======
            "description" : "successful operation",
>>>>>>> ooof
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
<<<<<<< HEAD
            },
            "description" : "successful operation"
          },
          "400" : {
            "content" : { },
            "description" : "Invalid username supplied"
          },
          "404" : {
            "content" : { },
            "description" : "User not found"
          }
        },
        "summary" : "Get user by user name",
        "tags" : [ "user" ],
        "x-accepts" : "application/json"
      },
      "put" : {
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "description" : "name that need to be deleted",
          "in" : "path",
          "name" : "username",
=======
            }
          },
          "400" : {
            "description" : "Invalid username supplied",
            "content" : { }
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        },
        "x-accepts" : "application/json"
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be deleted",
>>>>>>> ooof
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
<<<<<<< HEAD
=======
          "description" : "Updated user object",
>>>>>>> ooof
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
<<<<<<< HEAD
          "description" : "Updated user object",
=======
>>>>>>> ooof
          "required" : true
        },
        "responses" : {
          "400" : {
<<<<<<< HEAD
            "content" : { },
            "description" : "Invalid user supplied"
          },
          "404" : {
            "content" : { },
            "description" : "User not found"
          }
        },
        "summary" : "Updated user",
        "tags" : [ "user" ],
        "x-codegen-request-body-name" : "body",
        "x-contentType" : "*/*",
        "x-accepts" : "application/json"
=======
            "description" : "Invalid user supplied",
            "content" : { }
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "body",
        "x-contentType" : "*/*",
        "x-accepts" : "application/json"
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied",
            "content" : { }
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        },
        "x-accepts" : "application/json"
>>>>>>> ooof
      }
    }
  },
  "components" : {
    "schemas" : {
      "Order" : {
<<<<<<< HEAD
        "description" : "An order for a pets from the pet store",
        "example" : {
          "petId" : 6,
          "quantity" : 1,
          "id" : 0,
          "shipDate" : "2000-01-23T04:56:07.000+00:00",
          "complete" : false,
          "status" : "placed"
        },
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
          },
          "petId" : {
            "format" : "int64",
            "type" : "integer"
          },
          "quantity" : {
            "format" : "int32",
            "type" : "integer"
          },
          "shipDate" : {
            "format" : "date-time",
            "type" : "string"
          },
          "status" : {
            "description" : "Order Status",
            "enum" : [ "placed", "approved", "delivered" ],
            "type" : "string"
          },
          "complete" : {
            "default" : false,
            "type" : "boolean"
          }
        },
        "title" : "Pet Order",
        "type" : "object",
=======
        "title" : "Pet Order",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "petId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "shipDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "Order Status",
            "enum" : [ "placed", "approved", "delivered" ]
          },
          "complete" : {
            "type" : "boolean",
            "default" : false
          }
        },
        "description" : "An order for a pets from the pet store",
        "example" : {
          "petId" : 6,
          "quantity" : 1,
          "id" : 0,
          "shipDate" : "2000-01-23T04:56:07.000+00:00",
          "complete" : false,
          "status" : "placed"
        },
>>>>>>> ooof
        "xml" : {
          "name" : "Order"
        }
      },
      "Category" : {
<<<<<<< HEAD
        "description" : "A category for a pet",
        "example" : {
          "name" : "name",
          "id" : 6
        },
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
=======
        "title" : "Pet category",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
>>>>>>> ooof
          },
          "name" : {
            "type" : "string"
          }
        },
<<<<<<< HEAD
        "title" : "Pet category",
        "type" : "object",
=======
        "description" : "A category for a pet",
        "example" : {
          "name" : "name",
          "id" : 6
        },
>>>>>>> ooof
        "xml" : {
          "name" : "Category"
        }
      },
      "User" : {
<<<<<<< HEAD
        "description" : "A User who is purchasing from the pet store",
        "example" : {
          "firstName" : "firstName",
          "lastName" : "lastName",
          "password" : "password",
          "userStatus" : 6,
          "phone" : "phone",
          "id" : 0,
          "email" : "email",
          "username" : "username"
        },
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
=======
        "title" : "a User",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
>>>>>>> ooof
          },
          "username" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "userStatus" : {
<<<<<<< HEAD
            "description" : "User Status",
            "format" : "int32",
            "type" : "integer"
          }
        },
        "title" : "a User",
        "type" : "object",
=======
            "type" : "integer",
            "description" : "User Status",
            "format" : "int32"
          }
        },
        "description" : "A User who is purchasing from the pet store",
        "example" : {
          "firstName" : "firstName",
          "lastName" : "lastName",
          "password" : "password",
          "userStatus" : 6,
          "phone" : "phone",
          "id" : 0,
          "email" : "email",
          "username" : "username"
        },
>>>>>>> ooof
        "xml" : {
          "name" : "User"
        }
      },
      "Tag" : {
<<<<<<< HEAD
        "description" : "A tag for a pet",
        "example" : {
          "name" : "name",
          "id" : 1
        },
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
=======
        "title" : "Pet Tag",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
>>>>>>> ooof
          },
          "name" : {
            "type" : "string"
          }
        },
<<<<<<< HEAD
        "title" : "Pet Tag",
        "type" : "object",
=======
        "description" : "A tag for a pet",
        "example" : {
          "name" : "name",
          "id" : 1
        },
>>>>>>> ooof
        "xml" : {
          "name" : "Tag"
        }
      },
      "Pet" : {
<<<<<<< HEAD
        "description" : "A pet for sale in the pet store",
        "example" : {
          "photoUrls" : [ "photoUrls", "photoUrls" ],
          "name" : "doggie",
          "id" : 0,
          "category" : {
            "name" : "name",
            "id" : 6
          },
          "tags" : [ {
            "name" : "name",
            "id" : 1
          }, {
            "name" : "name",
            "id" : 1
          } ],
          "status" : "available"
        },
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
=======
        "title" : "a Pet",
        "required" : [ "name", "photoUrls" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
>>>>>>> ooof
          },
          "category" : {
            "$ref" : "#/components/schemas/Category"
          },
          "name" : {
<<<<<<< HEAD
            "example" : "doggie",
            "type" : "string"
          },
          "photoUrls" : {
            "items" : {
              "type" : "string"
            },
=======
            "type" : "string",
            "example" : "doggie"
          },
          "photoUrls" : {
>>>>>>> ooof
            "type" : "array",
            "xml" : {
              "name" : "photoUrl",
              "wrapped" : true
<<<<<<< HEAD
            }
          },
          "tags" : {
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            },
=======
            },
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
>>>>>>> ooof
            "type" : "array",
            "xml" : {
              "name" : "tag",
              "wrapped" : true
<<<<<<< HEAD
            }
          },
          "status" : {
            "description" : "pet status in the store",
            "enum" : [ "available", "pending", "sold" ],
            "type" : "string"
          }
        },
        "required" : [ "name", "photoUrls" ],
        "title" : "a Pet",
        "type" : "object",
=======
            },
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "pet status in the store",
            "enum" : [ "available", "pending", "sold" ]
          }
        },
        "description" : "A pet for sale in the pet store",
        "example" : {
          "photoUrls" : [ "photoUrls", "photoUrls" ],
          "name" : "doggie",
          "id" : 0,
          "category" : {
            "name" : "name",
            "id" : 6
          },
          "tags" : [ {
            "name" : "name",
            "id" : 1
          }, {
            "name" : "name",
            "id" : 1
          } ],
          "status" : "available"
        },
>>>>>>> ooof
        "xml" : {
          "name" : "Pet"
        }
      },
      "ApiResponse" : {
<<<<<<< HEAD
        "description" : "Describes the result of uploading an image resource",
        "example" : {
          "code" : 0,
          "type" : "type",
          "message" : "message"
        },
        "properties" : {
          "code" : {
            "format" : "int32",
            "type" : "integer"
=======
        "title" : "An uploaded response",
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
>>>>>>> ooof
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        },
<<<<<<< HEAD
        "title" : "An uploaded response",
        "type" : "object"
=======
        "description" : "Describes the result of uploading an image resource",
        "example" : {
          "code" : 0,
          "type" : "type",
          "message" : "message"
        }
>>>>>>> ooof
      }
    },
    "securitySchemes" : {
      "petstore_auth" : {
<<<<<<< HEAD
=======
        "type" : "oauth2",
>>>>>>> ooof
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://petstore.swagger.io/api/oauth/dialog",
            "scopes" : {
              "write:pets" : "modify pets in your account",
              "read:pets" : "read your pets"
            }
          }
<<<<<<< HEAD
        },
        "type" : "oauth2"
      },
      "api_key" : {
        "in" : "header",
        "name" : "api_key",
        "type" : "apiKey"
=======
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
>>>>>>> ooof
      }
    }
  }
}
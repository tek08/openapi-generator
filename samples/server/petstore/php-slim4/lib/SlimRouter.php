<?php

/**
<<<<<<< HEAD
 * OpenAPI Petstore
 * PHP version 7.2
=======
 * SlimRouter
 *
 * PHP version 7.1
>>>>>>> ooof
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
<<<<<<< HEAD
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
=======
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
>>>>>>> ooof
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use Slim\Factory\AppFactory;
use Slim\Interfaces\RouteInterface;
<<<<<<< HEAD
use Slim\Exception\HttpNotImplementedException;
=======
>>>>>>> ooof
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Dyorg\TokenAuthentication;
use Dyorg\TokenAuthentication\TokenSearch;
use Psr\Http\Message\ServerRequestInterface;
use OpenAPIServer\Middleware\JsonBodyParserMiddleware;
use OpenAPIServer\Mock\OpenApiDataMocker;
<<<<<<< HEAD
use OpenAPIServer\Mock\OpenApiDataMockerRouteMiddleware;
use Slim\Psr7\Factory\ResponseFactory;
=======
use OpenAPIServer\Mock\OpenApiDataMockerMiddleware;
>>>>>>> ooof
use Exception;

/**
 * SlimRouter Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class SlimRouter
{

    /** @var App instance */
    private $slimApp;

    /** @var array[] list of all api operations */
    private $operations = [
        [
<<<<<<< HEAD
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/pet',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'addPet',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/Pet"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Pet"
=======
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/v2',
            'path' => '/another-fake/dummy',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAnotherFakeApi',
            'userClassname' => 'AnotherFakeApi',
            'operationId' => 'call123TestSpecialTags',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Client"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/create_xml_item',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'createXmlItem',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/outer/boolean',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'fakeOuterBooleanSerialize',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Output boolean',
                    'jsonSchema' => '{
  "description" : "Output boolean",
  "content" : {
    "*/*" : {
      "schema" : {
        "$ref" : "#/components/schemas/OuterBoolean"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/outer/composite',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'fakeOuterCompositeSerialize',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Output composite',
                    'jsonSchema' => '{
  "description" : "Output composite",
  "content" : {
    "*/*" : {
      "schema" : {
        "$ref" : "#/components/schemas/OuterComposite"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/outer/number',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'fakeOuterNumberSerialize',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Output number',
                    'jsonSchema' => '{
  "description" : "Output number",
  "content" : {
    "*/*" : {
      "schema" : {
        "$ref" : "#/components/schemas/OuterNumber"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/outer/string',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'fakeOuterStringSerialize',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Output string',
                    'jsonSchema' => '{
  "description" : "Output string",
  "content" : {
    "*/*" : {
      "schema" : {
        "$ref" : "#/components/schemas/OuterString"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/body-with-file-schema',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'testBodyWithFileSchema',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Success',
                    'jsonSchema' => '{
  "description" : "Success",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/body-with-query-params',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'testBodyWithQueryParams',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Success',
                    'jsonSchema' => '{
  "description" : "Success",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'testClientModel',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Client"
>>>>>>> ooof
      }
    }
  }
}',
                ],
<<<<<<< HEAD
                '405' => [
                    'jsonSchema' => '{
  "description" : "Invalid input"
=======
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'testEndpointParameters',
            'responses' => [
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid username supplied',
                    'jsonSchema' => '{
  "description" : "Invalid username supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'User not found',
                    'jsonSchema' => '{
  "description" : "User not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'http_basic_test'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'testEnumParameters',
            'responses' => [
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid request',
                    'jsonSchema' => '{
  "description" : "Invalid request",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Not found',
                    'jsonSchema' => '{
  "description" : "Not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'testGroupParameters',
            'responses' => [
                '400' => [
                    'code' => 400,
                    'message' => 'Someting wrong',
                    'jsonSchema' => '{
  "description" : "Someting wrong",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/inline-additionalProperties',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'testInlineAdditionalProperties',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/jsonFormData',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'testJsonFormData',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/test-query-paramters',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeApi',
            'userClassname' => 'FakeApi',
            'operationId' => 'testQueryParameterCollectionFormat',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Success',
                    'jsonSchema' => '{
  "description" : "Success",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake_classname_test',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractFakeClassnameTags123Api',
            'userClassname' => 'FakeClassnameTags123Api',
            'operationId' => 'testClassname',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Client"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'api_key_query'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'api_key_query',
                    'isKeyInHeader' => false,
                    'isKeyInQuery' => true,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/pet',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'addPet',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
                '405' => [
                    'code' => 405,
                    'message' => 'Invalid input',
                    'jsonSchema' => '{
  "description" : "Invalid input",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'petstore_auth'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'write:pets', // modify pets in your account
                        'read:pets', // read your pets
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/pet/findByStatus',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'findPetsByStatus',
            'responses' => [
<<<<<<< HEAD
                '200' => [
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
>>>>>>> ooof
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Pet"
        }
      }
    },
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Pet"
        }
      }
    }
  }
}',
                ],
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid status value"
=======
                    'code' => 400,
                    'message' => 'Invalid status value',
                    'jsonSchema' => '{
  "description" : "Invalid status value",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'petstore_auth'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
<<<<<<< HEAD
=======
                        'write:pets', // modify pets in your account
>>>>>>> ooof
                        'read:pets', // read your pets
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/pet/findByTags',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'findPetsByTags',
            'responses' => [
<<<<<<< HEAD
                '200' => [
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
>>>>>>> ooof
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Pet"
        }
      }
    },
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Pet"
        }
      }
    }
  }
}',
                ],
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid tag value"
=======
                    'code' => 400,
                    'message' => 'Invalid tag value',
                    'jsonSchema' => '{
  "description" : "Invalid tag value",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'petstore_auth'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
<<<<<<< HEAD
=======
                        'write:pets', // modify pets in your account
>>>>>>> ooof
                        'read:pets', // read your pets
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/pet',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'updatePet',
            'responses' => [
<<<<<<< HEAD
                '200' => [
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/Pet"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Pet"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied"
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "Pet not found"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "Validation exception"
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Pet not found',
                    'jsonSchema' => '{
  "description" : "Pet not found",
  "content" : { }
}',
                ],
                '405' => [
                    'code' => 405,
                    'message' => 'Validation exception',
                    'jsonSchema' => '{
  "description" : "Validation exception",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'petstore_auth'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'write:pets', // modify pets in your account
                        'read:pets', // read your pets
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/pet/{petId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'deletePet',
            'responses' => [
<<<<<<< HEAD
                '400' => [
                    'jsonSchema' => '{
  "description" : "Invalid pet value"
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Invalid pet value',
                    'jsonSchema' => '{
  "description" : "Invalid pet value",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'petstore_auth'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'write:pets', // modify pets in your account
                        'read:pets', // read your pets
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/pet/{petId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'getPetById',
            'responses' => [
<<<<<<< HEAD
                '200' => [
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
>>>>>>> ooof
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/Pet"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Pet"
      }
    }
  }
}',
                ],
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied"
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "Pet not found"
=======
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Pet not found',
                    'jsonSchema' => '{
  "description" : "Pet not found",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'api_key'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'api_key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/pet/{petId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'updatePetWithForm',
            'responses' => [
                '405' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid input"
=======
                    'code' => 405,
                    'message' => 'Invalid input',
                    'jsonSchema' => '{
  "description" : "Invalid input",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'petstore_auth'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'write:pets', // modify pets in your account
                        'read:pets', // read your pets
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/pet/{petId}/uploadImage',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'uploadFile',
            'responses' => [
<<<<<<< HEAD
                '200' => [
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ApiResponse"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'petstore_auth'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'write:pets', // modify pets in your account
                        'read:pets', // read your pets
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/fake/{petId}/uploadImageWithRequiredFile',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPetApi',
            'userClassname' => 'PetApi',
            'operationId' => 'uploadFileWithRequiredFile',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
>>>>>>> ooof
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ApiResponse"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // oauth2 security schema named 'petstore_auth'
                [
                    'type' => 'oauth2',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => true,
                    'scopes' => [
                        'write:pets', // modify pets in your account
                        'read:pets', // read your pets
                    ],
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/store/inventory',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStoreApi',
            'userClassname' => 'StoreApi',
            'operationId' => 'getInventory',
            'responses' => [
<<<<<<< HEAD
                '200' => [
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
>>>>>>> ooof
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'api_key'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'api_key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/store/order',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStoreApi',
            'userClassname' => 'StoreApi',
            'operationId' => 'placeOrder',
            'responses' => [
<<<<<<< HEAD
                '200' => [
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
>>>>>>> ooof
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/Order"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Order"
      }
    }
  }
}',
                ],
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid Order"
=======
                    'code' => 400,
                    'message' => 'Invalid Order',
                    'jsonSchema' => '{
  "description" : "Invalid Order",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
<<<<<<< HEAD
            'path' => '/store/order/{orderId}',
=======
            'path' => '/store/order/{order_id}',
>>>>>>> ooof
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStoreApi',
            'userClassname' => 'StoreApi',
            'operationId' => 'deleteOrder',
            'responses' => [
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied"
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "Order not found"
=======
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Order not found',
                    'jsonSchema' => '{
  "description" : "Order not found",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
<<<<<<< HEAD
            'path' => '/store/order/{orderId}',
=======
            'path' => '/store/order/{order_id}',
>>>>>>> ooof
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStoreApi',
            'userClassname' => 'StoreApi',
            'operationId' => 'getOrderById',
            'responses' => [
<<<<<<< HEAD
                '200' => [
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
>>>>>>> ooof
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/Order"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Order"
      }
    }
  }
}',
                ],
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied"
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "Order not found"
=======
                    'code' => 400,
                    'message' => 'Invalid ID supplied',
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Order not found',
                    'jsonSchema' => '{
  "description" : "Order not found",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/user',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'createUser',
            'responses' => [
                'default' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "successful operation"
=======
                    'code' => 0,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
<<<<<<< HEAD
                // apiKey security schema named 'api_key'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'api_key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
=======
>>>>>>> ooof
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/user/createWithArray',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'createUsersWithArrayInput',
            'responses' => [
                'default' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "successful operation"
=======
                    'code' => 0,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
<<<<<<< HEAD
                // apiKey security schema named 'api_key'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'api_key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
=======
>>>>>>> ooof
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/user/createWithList',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'createUsersWithListInput',
            'responses' => [
                'default' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "successful operation"
=======
                    'code' => 0,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
<<<<<<< HEAD
                // apiKey security schema named 'api_key'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'api_key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
=======
>>>>>>> ooof
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/user/login',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'loginUser',
            'responses' => [
<<<<<<< HEAD
                '200' => [
                    'jsonSchema' => '{
  "description" : "successful operation",
  "headers" : {
    "Set-Cookie" : {
      "description" : "Cookie authentication key for use with the `api_key` apiKey authentication.",
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "string",
        "example" : "AUTH_KEY=abcde12345; Path=/; HttpOnly"
      }
    },
    "X-Rate-Limit" : {
      "description" : "calls per hour allowed by the user",
      "style" : "simple",
      "explode" : false,
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "headers" : {
    "X-Rate-Limit" : {
      "description" : "calls per hour allowed by the user",
>>>>>>> ooof
      "schema" : {
        "type" : "integer",
        "format" : "int32"
      }
    },
    "X-Expires-After" : {
<<<<<<< HEAD
      "description" : "date in UTC when toekn expires",
      "style" : "simple",
      "explode" : false,
=======
      "description" : "date in UTC when token expires",
>>>>>>> ooof
      "schema" : {
        "type" : "string",
        "format" : "date-time"
      }
    }
  },
  "content" : {
    "application/xml" : {
      "schema" : {
        "type" : "string"
      }
    },
    "application/json" : {
      "schema" : {
        "type" : "string"
      }
    }
  }
}',
                ],
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid username/password supplied"
=======
                    'code' => 400,
                    'message' => 'Invalid username/password supplied',
                    'jsonSchema' => '{
  "description" : "Invalid username/password supplied",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/user/logout',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'logoutUser',
            'responses' => [
                'default' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "successful operation"
=======
                    'code' => 0,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
<<<<<<< HEAD
                // apiKey security schema named 'api_key'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'api_key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
=======
>>>>>>> ooof
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/user/{username}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'deleteUser',
            'responses' => [
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid username supplied"
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "User not found"
=======
                    'code' => 400,
                    'message' => 'Invalid username supplied',
                    'jsonSchema' => '{
  "description" : "Invalid username supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'User not found',
                    'jsonSchema' => '{
  "description" : "User not found",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
<<<<<<< HEAD
                // apiKey security schema named 'api_key'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'api_key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
=======
>>>>>>> ooof
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/user/{username}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'getUserByName',
            'responses' => [
<<<<<<< HEAD
                '200' => [
=======
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
>>>>>>> ooof
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/xml" : {
      "schema" : {
        "$ref" : "#/components/schemas/User"
      }
    },
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/User"
      }
    }
  }
}',
                ],
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid username supplied"
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "User not found"
=======
                    'code' => 400,
                    'message' => 'Invalid username supplied',
                    'jsonSchema' => '{
  "description" : "Invalid username supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'User not found',
                    'jsonSchema' => '{
  "description" : "User not found",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/user/{username}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUserApi',
            'userClassname' => 'UserApi',
            'operationId' => 'updateUser',
            'responses' => [
                '400' => [
<<<<<<< HEAD
                    'jsonSchema' => '{
  "description" : "Invalid user supplied"
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "User not found"
=======
                    'code' => 400,
                    'message' => 'Invalid user supplied',
                    'jsonSchema' => '{
  "description" : "Invalid user supplied",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'User not found',
                    'jsonSchema' => '{
  "description" : "User not found",
  "content" : { }
>>>>>>> ooof
}',
                ],
            ],
            'authMethods' => [
<<<<<<< HEAD
                // apiKey security schema named 'api_key'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'api_key',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
=======
>>>>>>> ooof
            ],
        ],
    ];

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $settings Either a ContainerInterface or an associative array of app settings
     *
<<<<<<< HEAD
     * @throws HttpNotImplementedException When implementation class doesn't exists
     * @throws Exception when not supported authorization schema type provided
=======
     * @throws Exception When implementation class doesn't exists
>>>>>>> ooof
     */
    public function __construct($settings = [])
    {
        if ($settings instanceof ContainerInterface) {
            // Set container to create App with on AppFactory
            AppFactory::setContainer($settings);
        }
        $this->slimApp = AppFactory::create();

        // middlewares requires Psr\Container\ContainerInterface
        $container = $this->slimApp->getContainer();

        $authPackage = 'OpenAPIServer\Auth';
        $basicAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\BasicAuthenticator?";
<<<<<<< HEAD
            throw new HttpNotImplementedException($request, $message);
        };
        $apiKeyAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\ApiKeyAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };
        $oAuthAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\OAuthAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
=======
            throw new Exception($message);
        };
        $apiKeyAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\ApiKeyAuthenticator?";
            throw new Exception($message);
        };
        $oAuthAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\OAuthAuthenticator?";
            throw new Exception($message);
>>>>>>> ooof
        };

        $userOptions = $this->getSetting($settings, 'tokenAuthenticationOptions', null);

        // mocker options
        $mockerOptions = $this->getSetting($settings, 'mockerOptions', null);
        $dataMocker = $mockerOptions['dataMocker'] ?? new OpenApiDataMocker();
<<<<<<< HEAD
        $responseFactory = new ResponseFactory();
        $getMockStatusCodeCallback = $mockerOptions['getMockStatusCodeCallback'] ?? null;
=======
        $getMockResponseCallback = $mockerOptions['getMockResponseCallback'] ?? null;
>>>>>>> ooof
        $mockAfterCallback = $mockerOptions['afterCallback'] ?? null;

        foreach ($this->operations as $operation) {
            $callback = function ($request, $response, $arguments) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
<<<<<<< HEAD
                throw new HttpNotImplementedException($request, $message);
=======
                throw new Exception($message);
                $response->getBody()->write($message);
                return $response->withStatus(501);
>>>>>>> ooof
            };
            $middlewares = [new JsonBodyParserMiddleware()];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                $callback = "\\{$operation['apiPackage']}\\{$operation['userClassname']}:{$operation['operationId']}";
            }

            foreach ($operation['authMethods'] as $authMethod) {
                switch ($authMethod['type']) {
                    case 'http':
                        $authenticatorClassname = "\\{$authPackage}\\BasicAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $basicAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $basicAuthenticator,
                            'regex' => $authMethod['isBearer'] ? '/Bearer\s+(.*)$/i' : '/Basic\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'apiKey':
                        $authenticatorClassname = "\\{$authPackage}\\ApiKeyAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $apiKeyAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $apiKeyAuthenticator,
                            'regex' => '/^(.*)$/i',
                            'header' => $authMethod['isKeyInHeader'] ? $authMethod['keyParamName'] : null,
                            'parameter' => $authMethod['isKeyInQuery'] ? $authMethod['keyParamName'] : null,
                            'cookie' => $authMethod['isKeyInCookie'] ? $authMethod['keyParamName'] : null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'oauth2':
                        $authenticatorClassname = "\\{$authPackage}\\OAuthAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $oAuthAuthenticator = new $authenticatorClassname($container, $authMethod['scopes']);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $oAuthAuthenticator,
                            'regex' => '/Bearer\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    default:
                        throw new Exception('Unknown authorization schema type');
                }
            }

<<<<<<< HEAD
            if (is_callable($getMockStatusCodeCallback)) {
                $mockSchemaResponses = array_map(function ($item) {
                    return json_decode($item['jsonSchema'], true);
                }, $operation['responses']);
                $middlewares[] = new OpenApiDataMockerRouteMiddleware($dataMocker, $mockSchemaResponses, $responseFactory, $getMockStatusCodeCallback, $mockAfterCallback);
=======
            if (is_callable($getMockResponseCallback)) {
                $middlewares[] = new OpenApiDataMockerMiddleware($dataMocker, $operation['responses'], $getMockResponseCallback, $mockAfterCallback);
>>>>>>> ooof
            }

            $this->addRoute(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback,
                $middlewares
            )->setName($operation['operationId']);
        }
    }

    /**
     * Merges user defined options with dynamic params
     *
     * @param array $staticOptions Required static options
     * @param array $userOptions   User options
     *
     * @return array Merged array
     */
    private function getTokenAuthenticationOptions(array $staticOptions, array $userOptions = null)
    {
        if (is_array($userOptions) === false) {
            return $staticOptions;
        }

        return array_merge($userOptions, $staticOptions);
    }

    /**
     * Returns app setting by name.
     *
     * @param ContainerInterface|array $settings    Either a ContainerInterface or an associative array of app settings
     * @param string                   $settingName Setting name
     * @param mixed                    $default     Default setting value.
     *
     * @return mixed
     */
    private function getSetting($settings, $settingName, $default = null)
    {
        if ($settings instanceof ContainerInterface && $settings->has($settingName)) {
            return $settings->get($settingName);
        } elseif (is_array($settings) && array_key_exists($settingName, $settings)) {
            return $settings[$settingName];
        }

        return $default;
    }

    /**
     * Add route with multiple methods
     *
     * @param string[]        $methods     Numeric array of HTTP method names
     * @param string          $pattern     The route URI pattern
     * @param callable|string $callable    The route callback routine
     * @param array|null      $middlewares List of middlewares
     *
     * @return RouteInterface
     *
     * @throws InvalidArgumentException If the route pattern isn't a string
     */
    public function addRoute(array $methods, string $pattern, $callable, $middlewares = [])
    {
        $route = $this->slimApp->map($methods, $pattern, $callable);
        foreach ($middlewares as $middleware) {
            $route->add($middleware);
        }
        return $route;
    }

    /**
     * Returns Slim Framework instance
     *
     * @return App
     */
    public function getSlimApp()
    {
        return $this->slimApp;
    }
}
